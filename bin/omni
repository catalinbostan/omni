#!/bin/ksh -e

CFGFILE=$HOME/.omni
. $CFGFILE

: ${illumos_clone:="$wd/illumos-omnios"}
: ${omnios_clone:="$wd/omnios-build"}
: ${role:=1}

banner()
{
	echo
	echo "*** $*"
	echo
}

is()
{
	case $* in
	    dev)	[ "$role" -gt 1 ] && return 0 ;;
	    guardian)	[ "$role" -gt 2 ] && return 0 ;;
	esac
	return 1
}

answer=

ask()
{
	typeset a=$answer

	echo "$* (y/n) \\c"
	[ -n "$a" ] && echo $a
	while [[ "$a" != [yYnN] ]]; do
		read a
	done
	[[ "$a" = [yY] ]]
}

repo_branch()
{
	typeset repo=${1:?repo}
	(
		cd $repo
		git status --short --branch -uno . | sed '
			s/\..*//
			s/.* //
			q
		    '
	)
}

joyent_commit()
{
	(
		cd $illumos_clone
		git show master:README.OmniOS | \
		    grep 'Last illumos-joyent' | \
		    awk '{print $4}'
	)
}

check_repo()
{
	typeset repo="${1:?}"
	typeset branch="${2:?}"

	if [ -z "$repo" ]; then
		echo "Repository path is not set in $CFGFILE"
		exit 1
	fi

	banner "Checking repository $repo ($branch)"

	typeset actual_branch="`repo_branch "$repo"`"

	if [ "$actual_branch" != "$branch" ]; then
		echo "$repo is not on $branch branch ($actual_branch)"
		exit 1
	fi
}

update_illumos_bloody()
{
	(
		cd $illumos_clone
		git checkout closed/README.ON-BINARIES.i386
		git pull upstream $branch

		for _branch in upstream_gate upstream_joyent; do
			banner "Updating $_branch branch"
			git checkout $_branch
			git pull $_branch master
		done

		git checkout $branch

		echo
		if ask "Push updates to github/$gituser?"; then
			git push origin --all
		fi
	)
}

update_illumos_stable()
{
	(
		cd $illumos_clone
		git checkout closed/README.ON-BINARIES.i386
		git pull upstream $branch
		echo
		if ask "Push updates to github/$gituser?"; then
			git push -u origin $branch
		fi
	)
}

update_illumos()
{
	check_repo "$illumos_clone" $branch
	banner "Updating illumos-omnios $release branch"
	if [ "$release" = bloody ]; then
		update_illumos_bloody
	else
		update_illumos_stable
	fi
}

diff_colour()
{
	gegrep --colour '^|^ [^ ].*'
}

upstream_diff()
{
	if [ "$release" != bloody ]; then
		echo "Command not available for $release release"
		return
	fi
	check_repo "$illumos_clone" $branch
	(
		cd $illumos_clone

		echo "GATE:"
		echo
		git log --reverse --no-merges --abbrev-commit \
		    master..upstream_gate \
		    | nawk '
			function op() {
				if (commit)
					printf("%-69s %s\n", issue, commit)
				commit = 0
			}
			/^commit / 	{ op(); commit = $2 }
			/^    [0-9][0-9][0-9][0-9] / {
				gsub(/  +/, " ")
				issue = substr($0, 0, 69)
			}
			END { op() }
		    ' | diff_colour

		echo
		echo "JOYENT:"
		echo

		git checkout -q upstream_joyent
		git whatchanged --reverse --no-merges --abbrev-commit \
		    `joyent_commit`.. \
		    | nawk '
			function op() {
				if (matched)
				{
					printf("%-69s %s\n", issue, commit)
					for (i in files)
						print "         ", files[i]
					print ""
					matched = 0
				}
				# Clear array
				split("", files)
			}
			/^commit / 	{ op(); commit = $2 }
			/OS-[0-9]/ {
				gsub(/  +/, " ")
				issue = substr($0, 0, 69)
			}
			/^:/ {
				files[NR] = sprintf("%s %s", $5, $6)
			}
			/(brand|fs)\/lx/ { matched = 1 }
			END { op() }
		    ' | diff_colour
		git checkout -q $branch
		echo
	)
}

update_omnios()
{
        check_repo "$omnios_clone" $branch
	banner "Updating $release OmniOS build"
        (
                cd $omnios_clone
		git pull upstream $branch
		echo
		if ask "Push updates to github/$gituser?"; then
			git push origin --all
		fi
        )
}

build_illumos()
{
	banner "Starting illumos-omnios $release build..."
	/opt/onbld/bin/nightly $wd/omnios.env &
	nightlypid=$!
	while [ ! -f $illumos_clone/log/nightly.log ]; do
		sleep 1
	done
	tail -f $illumos_clone/log/nightly.log &
	tailpid=$!
	wait $nightlypid
	kill $tailpid
}

build_omnios()
{
	cd $omnios_clone/build
	[ -z "$USER" ] && USER=LOGNAME
	./buildctl build continue
}

help()
{
	cat << EOM
omni [-n|-y] <operation>

    -n               - assume no to all questions.
    -y               - assume yes to all questions.

Operations:

    update_illumos   - update your local omnios illumos environment     (ui)
    build_illumos    - build omnios-illumos                             (bi)

    update_omnios    - update your local omnios build environment       (uo)
    build_omnios     - build OmniOS                                     (bo)
EOM

	is dev && cat << EOM

    upstream_diff    - show changes omnios-illumos master and upstream  (ud)
                       (bloody only)

EOM

	cat << EOM
NB: Ops can be abbreviated to the term shown in brackets, e.g. 'omni uo'
	
EOM
}

[ "$1" = "-y" ] && answer=y && shift
[ "$1" = "-n" ] && answer=n && shift

[ -z "$@" ] && help

for op in "$@"; do
    case $op in
	ui|update_illumos)		update_illumos ;;
	bi|build_illumos)		build_illumos ;;
	uo|update_omnios)		update_omnios ;;
	bo|build_omnios)		build_omnios ;;
	ud|upstream_diff)		is dev && upstream_diff || help;;
	*) 				"$@" || help ;;
    esac
done

exit 0

