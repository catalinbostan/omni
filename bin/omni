#!/bin/ksh -e

CFGFILE=$HOME/.omni
. $CFGFILE

omnios_clone="$wd/illumos-omnios"
build_clone="$wd/omnios-build"

banner()
{
	echo
	echo "*** $*"
	echo
}

ask()
{
	typeset a=

	echo "$* (y/n) \\c"
	while [[ "$a" != [yYnN] ]]; do
		read a
	done
	[[ "$a" = [yY] ]]
}

repo_branch()
{
	typeset repo=${1:?repo}
	(
		cd $repo
		git status --short --branch -uno . | sed '
			s/\..*//
			s/.* //
			q
		    '
	)
}

joyent_commit()
{
	(
		cd $omnios_clone
		git show master:README.OmniOS | \
		    grep 'Last illumos-joyent' | \
		    awk '{print $4}'
	)
}

check_repo()
{
	typeset repo="${1:?}"
	typeset branch="${2:?}"

	if [ -z "$repo" ]; then
		echo "Repository path is not set in $CFGFILE"
		exit 1
	fi

	banner "Checking repository $repo ($branch)"

	typeset actual_branch="`repo_branch "$repo"`"

	if [ "$actual_branch" != "$branch" ]; then
		echo "$repo is not on $branch branch ($actual_branch)"
		exit 1
	fi
}

update_illumos_bloody()
{
	(
		cd $omnios_clone
		git checkout closed/README.ON-BINARIES.i386
		git pull upstream $branch

		for _branch in upstream_gate upstream_joyent; do
			banner "Updating $_branch branch"
			git checkout $_branch
			git pull $_branch master
		done

		git checkout $branch
		if ask "Push updates to github/$gituser?"; then
			git push origin --all
		fi
	)
}

update_illumos_stable()
{
	(
		cd $omnios_clone
		git checkout closed/README.ON-BINARIES.i386
		git pull upstream $branch
		if ask "Push updates to github/$gituser?"; then
			git push -u origin $branch
		fi
	)
}

update_illumos()
{
	check_repo "$omnios_clone" $branch
	banner "Updating illumos-omnios $release branch"
	if [ "$release" = bloody ]; then
		update_illumos_bloody
	else
		update_illumos_stable
	fi
}

upstream_diff()
{
	if [ "$release" != bloody ]; then
		echo "Command not available for $release release"
		return
	fi
	check_repo "$omnios_clone" $branch
	(
		cd $omnios_clone

		echo "GATE:"
		echo
		git log --reverse --no-merges master..upstream_gate | sed -n '
			/^commit / {
				s/commit //
				p
			}
			/    [0-9]\{4\} /p
		' | paste -d\  - -

		echo
		echo "JOYENT:"
		echo

		git checkout -q upstream_joyent
		git log --reverse --no-merges `joyent_commit`.. | sed -n '
			/^commit /h
			/    OS-/ {
				H
				x
				p
			}
		' | paste -d\  - -
		git checkout -q $branch
		echo
	)
}

update_omnios()
{
        check_repo "$build_clone" $branch
	banner "Updating $release OmniOS build"
        (
                cd $build_clone
		git pull upstream $branch
		if ask "Push updates to github/$gituser?"; then
			git push origin --all
		fi
        )
}

build_illumos()
{
	banner "Starting illumos-omnios $release build..."
	/opt/onbld/bin/nightly $wd/omnios.env &
	nightlypid=$!
	while [ ! -f $omnios_clone/log/nightly.log ]; do
		sleep 1
	done
	tail -f $omnios_clone/log/nightly.log &
	tailpid=$!
	wait $nightlypid
	kill $tailpid
}

build_omnios()
{
	cd $build_clone/build
	[ -z "$USER" ] && USER=LOGNAME
	./buildctl build continue
}

help()
{
	cat << EOM
omni <operation>

    update_illumos   - update your local omnios illumos environment     (ui)
    build_illumos    - build omnios-illumos                             (bi)

    update_omnios    - update your local omnios build environment       (uo)
    build_omnios     - build OmniOS                                     (bo)

    upstream_diff    - show changes omnios-illumos master and upstream  (ud)
                       (bloody only)

NB: Ops can be abbreviated to the term shown in brackets, e.g. 'omni uo'
	
EOM
}

[ -z "$@" ] && help

for op in "$@"; do
    case $op in
	ui|update_illumos)		update_illumos ;;
	bi|build_illumos)		build_illumos ;;
	uo|update_omnios)		update_omnios ;;
	bo|build_omnios)		build_omnios ;;
	ud|upstream_diff)		upstream_diff ;;
	*) 				help ;;
    esac
done

exit 0

